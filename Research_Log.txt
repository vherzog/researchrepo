WEEK 1:
September 20 - 4 hours
- tinkered with RERAN
- looked up bytecode rewriting tools (Redexer*)

September 22 - 4 hours
- pushed replay software to Nexus (moved files to /data/local/)
- troubleshooting: adb root to device
  - http://www.makeuseof.com/tag/how-to-easily-root-unroot-and-unlock-any-nexus-device/
  - https://autoroot.chainfire.eu/
- successfully rooted, but still having issues running executable (replay_4)
  adb SHELL (#)
    data/local/REPLAY_UTILITY/replay_4 /data/local/abJava.txt 
    error: /sbin/adbdsh: /data/local/REPLAY_UTILITY/replay_4: can't execute: Permission denied
- tried changing settings in adbd Insecure/SuperSU Free
- download/made Redexer... learning how it works
  - important links to learn Redexer:
    - http://www.youtube.com/watch?v=ptjedOZEXPM
    - Dalvik Executable Format -- http://source.android.com/tech/dalvik/dex-format.html
    - Bytecode for the Dalvik VM -- http://source.android.com/devices/tech/dalvik/
- troubleshooting Redexer tutorial:
  - issues running 'make doc' command
      Error: Unbound module Yojson
      Command exited with code 2.
      
September 23 - 2 hours
- conversed with one creator of Redexer (krismicinski@gmail.com), in order to fix issue with Redexer install
- continued troubleshooting Redexer issues
- began learning about Dalvik byte code

WEEK 2:
September 27 - 4 hours
- met with Onur
- looked into Dexpler (Dalvik bytecote to Soot Jimple Tanslator)
** play drone ?
- recorded different applications (see "replay_testing.txt") and marked down non-deterministic behaviors

September 29 - 4 Hours
- Redexer: main language - Ocaml (Objective Caml)
  - important articles: http://www.netmite.com/android/mydroid/dalvik/docs/dex-format.html
      https://github.com/plum-umd/redexer
      
September 30 - 2 hours
- learning/understanding Smali
- testing apps

WEEK 3:
October 4 - 3 hours
- exploring Smali code
  - helpful resource: https://samsclass.info/128/proj/smali-trojan.htm
  - downlaoded apktools from: https://bitbucket.org/iBotPeaches/apktool/downloads
  - created, zipped, pushed, and ran basic HelloWorld.smali code & Main.smali (print string '42')

October 6 - 5.5 hours
- created signed key - successfully repacked an application (snapchat)
  	jarsigner -verbose -sigalg MD5withRSA -digestalg SHA1 -keystore my-release-key.keystore base.apk alias_name
- sent message to log in onCreate (my own app) success!
- found syntax for log output in smali (example below):
  (in MainActivity.smali)
  #virtual methods
  .method protected onCreate(Landroids/os/Bundle;)V
    .locals 4
    ......
    .line 25
    const-string v2, "Debug message"
    const-string v3, "This is a test."
    invoke-static {v2, v3}, Landroid/util/log;->(Ljava/lang/String;Ljava/lang/String;)I
    ......
    return void
  .end method
- started working on an automated schell script to find method calls & add log calls for smali files
  
October 7 - 1.5 hours
- looked into smali code to try to hack snapchat photo timer
- tested replay applications & recorded results

Week 4:
October 11 - 1 hour
- worked on automatic method calling program
- worked to successfully install Redexer

October 12 - 1.5 hours
- work on Redexer installation

October 13 - 4 hours
- continue working on Redexer installation
- investigated how 2048 generates random numbers (and attempted to change)
- experimented with logging in smali files (for snapchat app)

October 14 - 3.5 hours
- learned basics of Redexer & started logging tutorial
- use Redexer to log certain methods to txt file (of simple app)

Week 5:
October 17 - 1 hour
- troubleshooting redexer
- investigated snapchat/2048 smali code further

October 18 - 4 hours
- Looked deeper into redexer
- printed classes in classes.dex file of 2048 game using redexer (sucessful)
    redexer-master $ruby scripts/cmd.rb ../Android-Apps/2048/base/build/apk/classes.dex --cmd classes
- working on running .dex or .apk file through redexer to add loggin capabilities to certain methods (when called)
- investigated random number generation in 2048 more:
  - from MainGame.smali: removed line 287-289
      invoke-static {}, Ljava/lang/Math;->random()D

      move-result-wide v2
  -replaced with:
    const v2, 0x3FB999999999999A
  - still troubleshooting

October 19 - 1 hour
- troubleshoot 2048 changing smali syntax (random)

October 20 - 4 hours
- working on implmenting method calls in app with redexer
- reran apps

Week 6:
October 25 - 4 hours
- going through how redexer is implemented
- learning basic Ocaml
- looking into errors with smali logging
- 2048 exercise

October 27 - 6 hours
- worked on 2048 app
  - looked into UUIDs and BigIntegers
  - **wrong functions, instead look into Random() and secureRandom()
- took more notes on how redexer program works

Week 7:
October 31 - 1 hour
- worked on 2048 (app: com.androbaby.game2048)
  - found each call to instantiate Random()
    - after each line, set fixed seed (constant int 2)
    - still not working
  - **go through and do the same for each call to secureRandom() as well

November 1 - 4 hours
- latest troubleshooting for 2048 exercise
- read through redexer files further (more debugging)

November 3 - 5 hours
- REDEXER WORKS!
- start looking through which methods redexer logs & how to implement more
- look into how to automate so that every method is logged

Week 8:
November 8 - 2 hours
- looking into how redexer implements logging (to add more logging commands)

November 9 - 2 hours
- looking into how redexer implements logging (continued)
- it seems that the default logging tracks more than just onCreate, onPause, onResume, and onDestroy
- logging implementation is called from /src/ext/logging.ml

November 10 - 3 hours
- determining whether redexer logging covers ALL methods in an apk

November 11 - 3 hours
- begin analysis of app methods calls (slides for wednesday)

Week 9:
November 15 - 5 hours
- wrote automated program (C++) to read textfiles of redexer logging output and logcat output of running application
- Finished analysis of __ # of apps
- slides for tomorrow

Week 10:
November 29: 2 hours
- wrote program (RERAN) to record app AND log
- troubleshooting android phone issues

November 30: 1 hour
- resolved nexus phone issues
- took more data (replays) of new apps

December 1: 4 hours
- wrote PYTHON program to compare 2 runs (record & replay run - RERAN) of an app, and base method calls on logging list provided by redexer
- found that there ARE differences in # of method calls between recorded run and 'identical' replay run
- started testing more applications

December 2: 3 hours
- began analysis of more applications 
- debugging comparison program (python)

Week 11:
December 6: 3 hours
- continued analysis of more applications
  - APP LIST:
    1.  2048
    2.  Solitaire
    3.  Angry Birds
    4.  CNN
    5.  Ninja Jump
    6.  Bubble Bee
    7.  StickBMX
    8.  Archery King
    9.  Rolling Sky
    10. Color Switch

December 8: 5 hours
- added Monkey analysis component to 10 apps
- started writing up tutorial for future researcher (about redexer/reran/my analysis program)
